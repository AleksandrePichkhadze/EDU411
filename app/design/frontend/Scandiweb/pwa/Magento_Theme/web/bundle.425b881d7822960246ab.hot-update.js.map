{"version":3,"sources":["webpack:////var/www/public/vendor/scandipwa/source/src/app/store/MyAccount/MyAccount.dispatcher.js"],"names":["CartDispatcher","WishlistDispatcher","CUSTOMER","ONE_MONTH_IN_SECONDS","MyAccountDispatcher","dispatch","query","MyAccountQuery","getCustomerQuery","customer","BrowserDatabase","getItem","id","updateCustomerDetails","executePost","prepareQuery","then","setItem","error","showNotification","message","authTokenExpired","updateCustomerIsAuthTokenExpired","deleteAuthorizationToken","updateCustomerSignInStatus","dispatcher","default","createGuestEmptyCart","updateInitialCartData","updateInitialWishlistData","deleteItem","ORDERS","options","mutation","getForgotPasswordMutation","fetchMutation","updateCustomerPasswordForgotStatus","getResetPasswordMutation","status","resetPassword","updateCustomerPasswordResetStatus","email","password","getCreateAccountMutation","updateIsLoading","data","createCustomer","confirmation_required","signIn","Promise","reject","getConfirmAccountMutation","__","getSignInMutation","result","token","generateCustomerToken","setAuthorizationToken","e","Object","defineProperty","_MyAccountDispatcher","value"],"mappings":"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","file":"bundle.425b881d7822960246ab.hot-update.js","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport MyAccountQuery from 'Query/MyAccount.query';\nimport {\n    updateCustomerDetails,\n    updateCustomerIsAuthTokenExpired,\n    updateCustomerPasswordForgotStatus,\n    updateCustomerPasswordResetStatus,\n    updateCustomerSignInStatus,\n    updateIsLoading\n} from 'Store/MyAccount/MyAccount.action';\nimport { showNotification } from 'Store/Notification/Notification.action';\nimport { ORDERS } from 'Store/Order/Order.reducer';\nimport {\n    deleteAuthorizationToken,\n    setAuthorizationToken\n} from 'Util/Auth';\nimport BrowserDatabase from 'Util/BrowserDatabase';\nimport { prepareQuery } from 'Util/Query';\nimport { executePost, fetchMutation } from 'Util/Request';\n\nexport const CartDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Cart/Cart.dispatcher'\n);\n\nexport const WishlistDispatcher = import(\n    /* webpackMode: \"lazy\", webpackChunkName: \"dispatchers\" */\n    'Store/Wishlist/Wishlist.dispatcher'\n);\n\nexport const CUSTOMER = 'customer';\n\nexport const ONE_MONTH_IN_SECONDS = 2628000;\n\n/**\n * My account actions\n * @class MyAccount\n * @namespace Store/MyAccount/Dispatcher\n */\nexport class MyAccountDispatcher {\n    requestCustomerData(dispatch) {\n        const query = MyAccountQuery.getCustomerQuery();\n\n        const customer = BrowserDatabase.getItem(CUSTOMER) || {};\n        if (customer.id) {\n            dispatch(updateCustomerDetails(customer));\n        }\n\n        return executePost(prepareQuery([query])).then(\n            /** @namespace Store/MyAccount/Dispatcher/requestCustomerDataExecutePostThen */\n            ({ customer }) => {\n                dispatch(updateCustomerDetails(customer));\n                BrowserDatabase.setItem(customer, CUSTOMER, ONE_MONTH_IN_SECONDS);\n            },\n            /** @namespace Store/MyAccount/Dispatcher/requestCustomerDataExecutePostError */\n            (error) => dispatch(showNotification('error', error[0].message))\n        );\n    }\n\n    logout(authTokenExpired = false, dispatch) {\n        if (authTokenExpired) {\n            dispatch(updateCustomerIsAuthTokenExpired(true));\n        } else {\n            deleteAuthorizationToken();\n        }\n        dispatch(updateCustomerSignInStatus(false));\n        CartDispatcher.then(\n            ({ default: dispatcher }) => {\n                dispatcher.createGuestEmptyCart(dispatch);\n                dispatcher.updateInitialCartData(dispatch);\n            }\n        );\n        WishlistDispatcher.then(\n            ({ default: dispatcher }) => dispatcher.updateInitialWishlistData(dispatch)\n        );\n        BrowserDatabase.deleteItem(ORDERS);\n        BrowserDatabase.deleteItem(CUSTOMER);\n        dispatch(updateCustomerDetails({}));\n    }\n\n    /**\n     * Forgot password action\n     * @param {{email: String}} [options={}]\n     * @returns {Promise<{status: String}>} Reset password token\n     * @memberof MyAccountDispatcher\n     */\n    forgotPassword(options = {}, dispatch) {\n        const mutation = MyAccountQuery.getForgotPasswordMutation(options);\n        return fetchMutation(mutation).then(\n            /** @namespace Store/MyAccount/Dispatcher/forgotPasswordFetchMutationThen */\n            () => dispatch(updateCustomerPasswordForgotStatus()),\n            /** @namespace Store/MyAccount/Dispatcher/forgotPasswordFetchMutationError */\n            (error) => dispatch(showNotification('error', error[0].message))\n        );\n    }\n\n    /**\n     * Reset password action\n     * @param {{token: String, password: String, password_confirmation: String}} [options={}]\n     * @returns {Promise<{status: String}>} Reset password token\n     * @memberof MyAccountDispatcher\n     */\n    resetPassword(options = {}, dispatch) {\n        const mutation = MyAccountQuery.getResetPasswordMutation(options);\n\n        return fetchMutation(mutation).then(\n            /** @namespace Store/MyAccount/Dispatcher/resetPasswordFetchMutationThen */\n            ({ resetPassword: { status } }) => dispatch(updateCustomerPasswordResetStatus(status)),\n            /** @namespace Store/MyAccount/Dispatcher/resetPasswordFetchMutationError */\n            () => dispatch(updateCustomerPasswordResetStatus('error'))\n        );\n    }\n\n    /**\n     * Create account action\n     * @param {{customer: Object, password: String}} [options={}]\n     * @memberof MyAccountDispatcher\n     */\n    createAccount(options = {}, dispatch) {\n        const { customer: { email }, password } = options;\n        const mutation = MyAccountQuery.getCreateAccountMutation(options);\n        dispatch(updateIsLoading(true));\n\n        return fetchMutation(mutation).then(\n            /** @namespace Store/MyAccount/Dispatcher/createAccountFetchMutationThen */\n            (data) => {\n                const { createCustomer: { customer } } = data;\n                const { confirmation_required } = customer;\n\n                if (confirmation_required) {\n                    dispatch(updateIsLoading(false));\n                    return 2;\n                }\n\n                return this.signIn({ email, password }, dispatch);\n            },\n\n            /** @namespace Store/MyAccount/Dispatcher/createAccountFetchMutationError */\n            (error) => {\n                dispatch(showNotification('error', error[0].message));\n                Promise.reject();\n                dispatch(updateIsLoading(false));\n\n                return false;\n            }\n        );\n    }\n\n    /**\n     * Confirm account action\n     * @param {{key: String, email: String, password: String}} [options={}]\n     * @memberof MyAccountDispatcher\n     */\n    confirmAccount(options = {}, dispatch) {\n        const mutation = MyAccountQuery.getConfirmAccountMutation(options);\n\n        return fetchMutation(mutation).then(\n            /** @namespace Store/MyAccount/Dispatcher/confirmAccountFetchMutationThen */\n            () => dispatch(showNotification('success', __('Your account is confirmed!'))),\n            /** @namespace Store/MyAccount/Dispatcher/confirmAccountFetchMutationError */\n            () => dispatch(showNotification('error', __('Something went wrong! Please, try again!')))\n        );\n    }\n\n    /**\n     * Sign in action\n     * @param {{email: String, password: String}} [options={}]\n     * @memberof MyAccountDispatcher\n     */\n    async signIn(options = {}, dispatch) {\n        const mutation = MyAccountQuery.getSignInMutation(options);\n\n        try {\n            const result = await fetchMutation(mutation);\n            const { generateCustomerToken: { token } } = result;\n\n            setAuthorizationToken(token);\n            dispatch(updateCustomerSignInStatus(true));\n            CartDispatcher.then(\n                ({ default: dispatcher }) => dispatcher.updateInitialCartData(dispatch)\n            );\n            WishlistDispatcher.then(\n                ({ default: dispatcher }) => dispatcher.updateInitialWishlistData(dispatch)\n            );\n            dispatch(updateIsLoading(false));\n\n            return true;\n        } catch ([e]) {\n            throw e;\n        }\n    }\n}\n\nexport default new MyAccountDispatcher();\n"],"sourceRoot":""}