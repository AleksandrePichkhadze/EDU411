{"version":3,"sources":["webpack:////var/www/public/vendor/scandipwa/source/src/app/util/Request/Request.js"],"names":["GRAPHQL_URI","getStoreCodePath","path","location","pathname","firstPathPart","split","window","storeList","includes","getGraphqlEndpoint","concat","appendTokenToHeaders","headers","token","getAuthorizationToken","Authorization","formatURI","query","variables","url","stringifyVariables","Object","keys","reduce","acc","variable","JSON","stringify","hash","join","getFetch","uri","name","fetch","method","Accept","putPersistedQuery","graphQlURI","cacheTTL","body","postFetch","checkForErrors","res","Promise","resolve","reject","errors","data","handleConnectionError","err","console","error","parseResponse","promise","then","json","HTTP_410_GONE","HTTP_201_CREATED","executeGet","queryObject","status","putResponse","executePost","listenForBroadCast","BroadcastChannel","bc","onmessage","update","payload","debounce","callback","delay","timeout","args","context","clearTimeout","setTimeout","apply"],"mappings":"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","file":"bundle.0739b7e701eb4d658d43.hot-update.js","sourcesContent":["/* eslint-disable @scandipwa/scandipwa-guidelines/create-config-files */\n/* eslint-disable no-console */\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport { getAuthorizationToken } from 'Util/Auth';\n\nimport { hash } from './Hash';\n\nexport const GRAPHQL_URI = '/graphql';\n\n/** @namespace Util/Request/getStoreCodePath */\nexport const getStoreCodePath = () => {\n    const path = location.pathname;\n    // eslint-disable-next-line no-undef\n    const firstPathPart = path.split('/')[1];\n\n    if (window.storeList.includes(firstPathPart)) {\n        return `/${ firstPathPart }`;\n    }\n\n    return '';\n};\n\n/** @namespace Util/Request/getGraphqlEndpoint */\nexport const getGraphqlEndpoint = () => getStoreCodePath().concat(GRAPHQL_URI);\n\n/**\n * Append authorization token to header object\n * @param {Object} headers\n * @returns {Object} Headers with appended authorization\n * @namespace Util/Request/appendTokenToHeaders\n */\nexport const appendTokenToHeaders = (headers) => {\n    const token = getAuthorizationToken();\n\n    return {\n        ...headers,\n        Authorization: token ? `Bearer ${token}` : ''\n    };\n};\n\n/**\n *\n * @param {String} query Request body\n * @param {Object} variables Request variables\n * @param {String} url GraphQL url\n * @returns {*}\n * @namespace Util/Request/formatURI\n */\nexport const formatURI = (query, variables, url) => {\n    const stringifyVariables = Object.keys(variables).reduce(\n        (acc, variable) => [...acc, `${ variable }=${ JSON.stringify(variables[variable]) }`],\n        [`?hash=${ hash(query) }`]\n    );\n\n    return `${ url }${ stringifyVariables.join('&') }`;\n};\n\n/**\n *\n * @param {String} uri\n * @param {String} name\n * @returns {Promise<Response>}\n * @namespace Util/Request/getFetch\n */\nexport const getFetch = (uri, name) => fetch(uri,\n    {\n        method: 'GET',\n        headers: appendTokenToHeaders({\n            'Content-Type': 'application/json',\n            'Application-Model': name,\n            Accept: 'application/json'\n        })\n    });\n\n/**\n *\n * @param {String} graphQlURI\n * @param {{}} query Request body\n * @param {Int} cacheTTL\n * @namespace Util/Request/putPersistedQuery\n */\nexport const putPersistedQuery = (graphQlURI, query, cacheTTL) => fetch(`${ graphQlURI }?hash=${ hash(query) }`,\n    {\n        method: 'PUT',\n        body: JSON.stringify(query),\n        headers: {\n            'Content-Type': 'application/json',\n            'SW-Cache-Age': cacheTTL\n        }\n    });\n\n/**\n *\n * @param {String} graphQlURI\n * @param {String} queryObject\n * @param {String} name\n * @returns {Promise<Response>}\n * @namespace Util/Request/postFetch\n */\nexport const postFetch = (graphQlURI, query, variables) => fetch(graphQlURI,\n    {\n        method: 'POST',\n        body: JSON.stringify({ query, variables }),\n        headers: appendTokenToHeaders({\n            'Content-Type': 'application/json',\n            Accept: 'application/json'\n        })\n    });\n\n/**\n * Checks for errors in response, if they exist, rejects promise\n * @param  {Object} res Response from GraphQL endpoint\n * @return {Promise<Object>} Handled GraphqlQL results promise\n * @namespace Util/Request/checkForErrors\n */\nexport const checkForErrors = (res) => new Promise((resolve, reject) => {\n    const { errors, data } = res;\n    return errors ? reject(errors) : resolve(data);\n});\n\n/**\n * Handle connection errors\n * @param  {any} err Error from fetch\n * @return {void} Simply console error\n * @namespace Util/Request/handleConnectionError\n */\nexport const handleConnectionError = (err) => console.error(err); // TODO: Add to logs pool\n\n/**\n * Parse response and check wether it contains errors\n * @param  {{}} queryObject prepared with `prepareDocument()` from `Util/Query` request body object\n * @return {Promise<Request>} Fetch promise to GraphQL endpoint\n * @namespace Util/Request/parseResponse\n */\nexport const parseResponse = (promise) => new Promise((resolve, reject) => {\n    promise.then(\n        /** @namespace Util/Request/promiseThen */\n        (res) => res.json().then(\n            /** @namespace Util/Request/resJsonThen */\n            (res) => resolve(checkForErrors(res)),\n            /** @namespace Util/Request/resJsonError */\n            () => handleConnectionError('Can not transform JSON!') && reject()\n        ),\n        /** @namespace Util/Request/promiseError */\n        (err) => handleConnectionError('Can not establish connection!') && reject(err)\n    );\n});\n\nexport const HTTP_410_GONE = 410;\nexport const HTTP_201_CREATED = 201;\n\n/**\n * Make GET request to endpoint (via ServiceWorker)\n * @param  {{}} queryObject prepared with `prepareDocument()` from `Util/Query` request body object\n * @param  {String} name Name of model for ServiceWorker to send BroadCasts updates to\n * @param  {Number} cacheTTL Cache TTL (in seconds) for ServiceWorker to cache responses\n * @return {Promise<Request>} Fetch promise to GraphQL endpoint\n * @namespace Util/Request/executeGet\n */\nexport const executeGet = (queryObject, name, cacheTTL) => {\n    const { query, variables } = queryObject;\n    const uri = formatURI(query, variables, getGraphqlEndpoint());\n\n    return parseResponse(new Promise((resolve) => {\n        getFetch(uri, name).then(\n            /** @namespace Util/Request/getFetchThen */\n            (res) => {\n                if (res.status === HTTP_410_GONE) {\n                    putPersistedQuery(getGraphqlEndpoint(), query, cacheTTL).then(\n                        /** @namespace Util/Request/putPersistedQueryThen */\n                        (putResponse) => {\n                            if (putResponse.status === HTTP_201_CREATED) {\n                                getFetch(uri, name).then(\n                                    /** @namespace Util/Request/putResponseGetFetchThen */\n                                    (res) => resolve(res)\n                                );\n                            }\n                        }\n                    );\n                } else {\n                    resolve(res);\n                }\n            }\n        );\n    }));\n};\n\n/**\n * Make POST request to endpoint\n * @param  {{}} queryObject prepared with `prepareDocument()` from `Util/Query` request body object\n * @return {Promise<Request>} Fetch promise to GraphQL endpoint\n * @namespace Util/Request/executePost\n */\nexport const executePost = (queryObject) => {\n    const { query, variables } = queryObject;\n    return parseResponse(postFetch(getGraphqlEndpoint(), query, variables));\n};\n\n/**\n * Listen to the BroadCast connection\n * @param  {String} name Name of model for ServiceWorker to send BroadCasts updates to\n * @return {Promise<any>} Broadcast message promise\n * @namespace Util/Request/listenForBroadCast\n */\nexport const listenForBroadCast = (name) => new Promise((resolve) => {\n    const { BroadcastChannel } = window;\n    if (BroadcastChannel) {\n        const bc = new BroadcastChannel(name);\n        bc.onmessage = (update) => {\n            const { data: { payload: body } } = update;\n            resolve(checkForErrors(body));\n        };\n    }\n});\n\n/** @namespace Util/Request/debounce */\nexport const debounce = (callback, delay) => {\n    // eslint-disable-next-line fp/no-let\n    let timeout;\n    return (...args) => {\n        const context = this;\n        clearTimeout(timeout);\n        timeout = setTimeout(() => callback.apply(context, args), delay);\n    };\n};\n"],"sourceRoot":""}