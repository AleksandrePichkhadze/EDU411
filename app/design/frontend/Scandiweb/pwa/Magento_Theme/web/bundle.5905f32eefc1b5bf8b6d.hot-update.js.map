{"version":3,"sources":["webpack:////var/www/public/vendor/scandipwa/source/src/app/util/Url/Url.js"],"names":["updateQueryParamWithoutHistory","name","value","history","location","search","pathname","params","URLSearchParams","set","replace","decodeURIComponent","removeQueryParamWithoutHistory","delete","getUrlParam","match","baseUrl","path","window","storeRegexText","currentUrl","RegExp","appendWithStoreCode","getStore","getState","ConfigReducer","base_link_url","origin","URL","storePrefix","storeList","join","startsWith","slice","concat","getQueryParam","variable","query","substring","vars","split","i","length","pair","convertQueryStringToKeyValuePairs","queryString","keyValuePairs","forEach","param","keyPair","valuePair","updateKeyValuePairs","currentKey","currentValue","updatedKeyValuePairs","Object","entries","key","convertKeyValuesToQueryString","newSearchQuery","keyExists","valueExists","generateQuery","keyValueObject","keyAndValueExist","updatedQuery","setQueryParams","state","push","clearQueriesFromUrl","objectToUri","paramString","sort","reduce","acc"],"mappings":"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","file":"bundle.5905f32eefc1b5bf8b6d.hot-update.js","sourcesContent":["/* eslint-disable fp/no-let */\n\n/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport { getStore } from 'Store';\n\n// TODO: fix no LET\n\n/**\n * Update query params without adding to history\n * @param {String} name\n * @param {String} value\n * @namespace Util/Url/updateQueryParamWithoutHistory\n */\nexport const updateQueryParamWithoutHistory = (name, value, history, location) => {\n    const { search, pathname } = location;\n\n    const params = new URLSearchParams(search);\n    params.set(name, value);\n    history.replace(decodeURIComponent(`${ pathname }?${ params }`));\n};\n\n/**\n * Remove query param without adding to history\n * @param {String} name\n * @namespace Util/Url/removeQueryParamWithoutHistory\n */\nexport const removeQueryParamWithoutHistory = (name, history, location) => {\n    const { search, pathname } = location;\n\n    const params = new URLSearchParams(search);\n    params.delete(name);\n    history.replace(decodeURIComponent(`${ pathname }?${ params }`));\n};\n\n/**\n * Get query param from url\n * @param {Object} match match object from react-router\n * @param {Object} location location object from react-router\n * @namespace Util/Url/getUrlParam\n */\nexport const getUrlParam = (match, location) => {\n    const baseUrl = match.path.replace(window.storeRegexText, '').replace('/', '');\n    const currentUrl = location.pathname.replace(new RegExp(window.storeRegexText), '');\n\n    if (baseUrl === '/') {\n        return currentUrl.replace(baseUrl, '');\n    }\n\n    return currentUrl.replace(baseUrl, '').replace(/^\\/*/, '');\n};\n\n/**\n * Append store code to URL\n * @param {String} pathname the URL to append store code to\n * @namespace Util/Url/appendWithStoreCode\n */\nexport const appendWithStoreCode = (pathname) => {\n    const { ConfigReducer: { base_link_url = window.location.origin } = {} } = getStore().getState() || {};\n    const { pathname: storePrefix } = new URL(base_link_url);\n\n    // ignore empty URLs\n    if (!pathname) {\n        return pathname;\n    }\n\n    // match URLs which have the store code in pathname\n    if (pathname.match(`/(${window.storeList.join('|')})`)) {\n        return pathname;\n    }\n\n    if (!pathname.startsWith('/')) {\n        // eslint-disable-next-line no-param-reassign\n        pathname = `/${ pathname }`;\n    }\n\n    // trim the last slash from URL, and append it to pathname\n    return storePrefix.slice(0, -1).concat(pathname);\n};\n\n/**\n * Get query variable value (from react router)\n * @param {String} variable Variable from URL\n * @param {Object} variable location object from react-router\n * @return {String|false} Variable value\n * @namespace Util/Url/getQueryParam\n */\nexport const getQueryParam = (variable, location) => {\n    const query = location.search.substring(1);\n    const vars = query.split('&');\n    // eslint-disable-next-line fp/no-loops\n    for (let i = 0; i < vars.length; i++) {\n        const pair = vars[i].split('=');\n        if (pair[0] === variable) {\n            return pair[1];\n        }\n    }\n\n    return false;\n};\n\n/**\n * Convert url params to object with key value pairs\n * @param {String} queryString url query string\n * @return {Object} Key-Value pairs\n * @namespace Util/Url/convertQueryStringToKeyValuePairs\n */\nexport const convertQueryStringToKeyValuePairs = (queryString) => {\n    const keyValuePairs = {};\n    const params = queryString.substring(1).split('&');\n\n    params.forEach((param) => {\n        const pair = param.split('=');\n        const [keyPair, valuePair = []] = pair;\n\n        if (keyPair.length > 0 && valuePair.length > 0) {\n            keyValuePairs[keyPair] = decodeURIComponent(valuePair);\n        }\n    });\n\n    return keyValuePairs;\n};\n\n/**\n * Update existing key value pairs and return result\n * @param {Object} keyValuePairs current key value pairs\n * @param {String} currentKey key of the value to be updated\n * @param {String} currentValue value to be updated\n * @return {Object} Key-Value pairs\n * @namespace Util/Url/updateKeyValuePairs\n */\nexport const updateKeyValuePairs = (keyValuePairs, currentKey, currentValue) => {\n    const updatedKeyValuePairs = {};\n\n    Object.entries(keyValuePairs).forEach((pair) => {\n        const [key, value] = pair;\n\n        if (currentKey === key) {\n            updatedKeyValuePairs[key] = currentValue;\n        } else {\n            updatedKeyValuePairs[key] = value;\n        }\n    });\n\n    return updatedKeyValuePairs;\n};\n\n/**\n * Convert object with key value pairs to url query string\n * @param {Object} keyValuePairs object with key value pairs\n * @return {String} Converted query string\n * @namespace Util/Url/convertKeyValuesToQueryString\n */\nexport const convertKeyValuesToQueryString = (keyValuePairs) => {\n    let newSearchQuery = '';\n\n    Object.entries(keyValuePairs).forEach((pair) => {\n        const [key, value] = pair;\n        const keyExists = key !== '';\n        const valueExists = typeof value === 'object' ? value.length : value !== '';\n\n        if (valueExists && keyExists) {\n            newSearchQuery += `${key}=${value}&`;\n        }\n    });\n\n    return `${newSearchQuery.slice(0, -1)}`; // remove trailing '&'\n};\n\n/** @namespace Util/Url/generateQuery */\nexport const generateQuery = (keyValueObject, location, history) => {\n    let query = history.location.search;\n\n    Object.entries(keyValueObject).forEach((pair) => {\n        const [key, value] = pair;\n\n        const keyAndValueExist = !!key && !!value;\n\n        if (query === '' && keyAndValueExist) {\n            query = `?${key}=${value}`;\n        } else if (getQueryParam(key, location) !== false) {\n            const keyValuePairs = convertQueryStringToKeyValuePairs(query);\n            const updatedKeyValuePairs = updateKeyValuePairs(keyValuePairs, key, value);\n            const updatedQuery = convertKeyValuesToQueryString(updatedKeyValuePairs);\n\n            query = updatedQuery.length ? `?${updatedQuery}` : '';\n        } else if (keyAndValueExist) {\n            query = `${query}&${key}=${value}`;\n        }\n    });\n\n    return query;\n};\n\n/**\n * Set add key value pairs to url\n * @param {Object} variable Object with key value pairs to be added to url\n * @param {Object} variable location object from react-router\n * @param {Object} variable react router history object\n * @param {Object} variable is url flush required\n * @namespace Util/Url/setQueryParams\n */\nexport const setQueryParams = (keyValueObject, location, history) => {\n    const { state } = location;\n    const query = generateQuery(keyValueObject, location, history);\n\n    history.push({ search: query, state });\n};\n\n/**\n * Remove all queries except default sort options from url\n * @param {Object} variable react router history object\n * @namespace Util/Url/clearQueriesFromUrl\n */\nexport const clearQueriesFromUrl = (history) => {\n    history.push({ search: '' });\n};\n\n/**\n * Convert object with key value pairs to url query string\n * @param {Object} keyValuePairs object with key value pairs\n * @return {String} Converted query string\n * @namespace Util/Url/objectToUri\n */\nexport const objectToUri = (keyValueObject = {}) => {\n    const paramString = Object.entries(keyValueObject).sort()\n        .reduce((acc, [key, value]) => `${acc}&${key}=${value}`, '')\n        .replace('&', '');\n\n    return paramString.length > 0 ? `?${paramString}` : '';\n};\n"],"sourceRoot":""}