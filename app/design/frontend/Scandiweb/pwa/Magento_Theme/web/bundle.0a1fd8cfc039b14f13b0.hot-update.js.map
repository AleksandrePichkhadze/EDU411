{"version":3,"sources":["webpack:////var/www/public/vendor/scandipwa/source/src/app/query/MyAccount.query.js"],"names":["MyAccountQuery","options","token","password","password_confirmation","Field","addArgument","addField","email","guestQuoteId","BrowserDatabase","getItem","GUEST_QUOTE_ID","_getCustomerField","currentPassword","newPassword","addFieldList","_getAddressFields","id","customer","console","log","key","_getConfirmAccountFields","_getCustomerFields","_getAddressesField","_getRegionFields","_getRegionField","Object","defineProperty","_MyAccountQuery","value"],"mappings":"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","file":"bundle.0a1fd8cfc039b14f13b0.hot-update.js","sourcesContent":["/**\n * ScandiPWA - Progressive Web App for Magento\n *\n * Copyright Â© Scandiweb, Inc. All rights reserved.\n * See LICENSE for license details.\n *\n * @license OSL-3.0 (Open Software License (\"OSL\") v. 3.0)\n * @package scandipwa/base-theme\n * @link https://github.com/scandipwa/base-theme\n */\n\nimport { GUEST_QUOTE_ID } from 'Store/Cart/Cart.dispatcher';\nimport BrowserDatabase from 'Util/BrowserDatabase';\nimport { Field } from 'Util/Query';\n\n/**\n * MyAccount Mutations\n * @class MyAccount\n * @namespace Query/MyAccount\n */\nexport class MyAccountQuery {\n    /**\n     * Get ResetPassword mutation\n     * @param {{token: String, password: String, password_confirmation: String}} options A object containing different aspects of query, each item can be omitted\n     * @return {Field}\n     * @memberof MyAccount\n     */\n    getResetPasswordMutation(options) {\n        const { token, password, password_confirmation } = options;\n\n        return new Field('resetPassword')\n            .addArgument('token', 'String!', token)\n            .addArgument('password', 'String!', password)\n            .addArgument('password_confirmation', 'String!', password_confirmation)\n            .addField('status');\n    }\n\n    /**\n     * Get SignIn mutation\n     * @param {{email: String, password: String}} options A object containing different aspects of query, each item can be omitted\n     * @return {Field}\n     * @memberof MyAccount\n     */\n    getSignInMutation(options) {\n        const { email, password } = options;\n        const guestQuoteId = BrowserDatabase.getItem(GUEST_QUOTE_ID);\n\n        return new Field('generateCustomerToken')\n            .addArgument('email', 'String!', email)\n            .addArgument('password', 'String!', password)\n            .addArgument('guest_quote_id', 'String', guestQuoteId)\n            .addField('token');\n    }\n\n    getUpdateInformationMutation(options) {\n        return new Field('updateCustomer')\n            .addArgument('input', 'CustomerInput!', options)\n            .addField(this._getCustomerField());\n    }\n\n    getChangeCustomerPasswordMutation(options) {\n        const { currentPassword, newPassword } = options;\n\n        return new Field('changeCustomerPassword')\n            .addArgument('currentPassword', 'String!', currentPassword)\n            .addArgument('newPassword', 'String!', newPassword)\n            .addField('id')\n            .addField('email');\n    }\n\n    getCreateAddressMutation(options) {\n        return new Field('createCustomerAddress')\n            .addArgument('input', 'CustomerAddressInput!', options)\n            .addFieldList(this._getAddressFields());\n    }\n\n    getDeleteAddressMutation(id) {\n        return new Field('deleteCustomerAddress')\n            .addArgument('id', 'Int!', id);\n    }\n\n    getUpdateAddressMutation(id, options) {\n        return new Field('updateCustomerAddress')\n            .addArgument('id', 'Int!', id)\n            .addArgument('input', 'CustomerAddressInput!', options)\n            .addFieldList(this._getAddressFields());\n    }\n\n    getCreateAccountMutation(options) {\n        const { customer, password } = options;\n        console.log(...customer)\n        return new Field('createCustomer')\n            .addArgument('input', 'CustomerInput!', { ...customer, password })\n            .addField(this._getCustomerField());\n    }\n\n    getConfirmAccountMutation(options) {\n        const { key, email, password } = options;\n\n        return new Field('confirmCustomerEmail')\n            .addArgument('key', 'String!', key)\n            .addArgument('email', 'String!', email)\n            .addArgument('password', 'String!', password)\n            .addFieldList(this._getConfirmAccountFields());\n    }\n\n    getCustomerQuery() {\n        return this._getCustomerField();\n    }\n\n    _getConfirmAccountFields() {\n        return [\n            'status',\n            'token',\n            this._getCustomerField()\n        ];\n    }\n\n    _getCustomerField() {\n        return new Field('customer')\n            .addFieldList(this._getCustomerFields());\n    }\n\n    _getCustomerFields() {\n        return [\n            'created_at',\n            'confirmation_required',\n            'group_id',\n            'prefix',\n            'firstname',\n            'middlename',\n            'lastname',\n            'suffix',\n            'email',\n            'default_billing',\n            'default_shipping',\n            'dob',\n            'taxvat',\n            'id',\n            'is_subscribed',\n            this._getAddressesField()\n        ];\n    }\n\n    _getAddressesField() {\n        return new Field('addresses')\n            .addFieldList(this._getAddressFields());\n    }\n\n    _getRegionField() {\n        return new Field('region')\n            .addFieldList(this._getRegionFields());\n    }\n\n    _getRegionFields() {\n        return [\n            'region_code',\n            'region',\n            'region_id'\n        ];\n    }\n\n    _getAddressFields() {\n        return [\n            'id',\n            'customer_id',\n            'country_id',\n            'street',\n            'telephone',\n            'postcode',\n            'city',\n            'firstname',\n            'lastname',\n            'middlename',\n            'prefix',\n            'suffix',\n            'default_shipping',\n            'default_billing',\n            this._getRegionField()\n        ];\n    }\n\n    /**\n     * Get ForgotPassword mutation\n     * @param {{email: String}} options\n     * @returns {Field}\n     * @memberof MyAccount\n     */\n    getForgotPasswordMutation(options) {\n        const { email } = options;\n\n        return new Field('forgotPassword')\n            .addArgument('email', 'String!', email)\n            .addField('status');\n    }\n}\n\nexport default new MyAccountQuery();\n"],"sourceRoot":""}